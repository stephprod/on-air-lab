<style>
.StripeElement {
  background-color: white;
  height: 40px;
  padding: 10px 12px;
  border-radius: 4px;
  border: 1px solid transparent;
  box-shadow: 0 1px 3px 0 #e6ebf1;
  -webkit-transition: box-shadow 150ms ease;
  transition: box-shadow 150ms ease;
}

.StripeElement--focus {
  box-shadow: 0 1px 3px 0 #cfd7df;
}

.StripeElement--invalid {
  border-color: #fa755a;
}

.StripeElement--webkit-autofill {
  background-color: #fefde5 !important;
}
.form-row {
    width: 70%;
    float: left;
}
label {
    font-weight: 500;
    font-size: 14px;
    display: block;
    margin-bottom: 8px;
}
button {
    border: none;
    border-radius: 4px;
    outline: none;
    text-decoration: none;
    color: #fff;
    background: #32325d;
    white-space: nowrap;
    display: inline-block;
    height: 40px;
    line-height: 40px;
    padding: 0 14px;
    box-shadow: 0 4px 6px rgba(50, 50, 93, .11), 0 1px 3px rgba(0, 0, 0, .08);
    border-radius: 4px;
    font-size: 15px;
    font-weight: 600;
    letter-spacing: 0.025em;
    text-decoration: none;
    -webkit-transition: all 150ms ease;
    transition: all 150ms ease;
    margin-left: 12px;
    margin-top: 28px;
}
</style>
<form id="payment-form">
  <div class="form-row">
    <label for="card-element">
        <h1> Carte de crédit/débit </h1>
    </label>
    <div id="card-element">
      <!-- A Stripe Element will be inserted here. -->
    </div>
    <p><%= locals.paymentObj[0].desc %></p>
    <p><%= locals.paymentObj[0].price %> €</p>
    <p><%= locals.paymentObj[0].id_art %></p>
    <p><%= locals.paymentObj[0].id_pro %></p>
    <!-- Used to display form errors. -->
    <div id="card-errors" role="alert"></div>
  </div>

  <button id="submit">Submit Payment</button>
</form>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.js"></script>
<script src="https://js.stripe.com/v3/"></script>
<script>
// Create a Stripe client.
var stripe = Stripe('pk_test_L0T2zWeT0uLcyhZCD1Nfqzx2');

// Create an instance of Elements.
var elements = stripe.elements();

// Custom styling can be passed to options when creating an Element.
// (Note that this demo uses a wider set of styles than the guide below.)
var style = {
  base: {
    color: '#32325d',
    lineHeight: '18px',
    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
    fontSmoothing: 'antialiased',
    fontSize: '16px',
    '::placeholder': {
      color: '#aab7c4'
    }
  },
  invalid: {
    color: '#fa755a',
    iconColor: '#fa755a'
  }
};

// Create an instance of the card Element.
var card = elements.create('card', {style: style});

// Add an instance of the card Element into the `card-element` <div>.
card.mount('#card-element');

// Handle real-time validation errors from the card Element.
card.addEventListener('change', function(event) {
  var displayError = document.getElementById('card-errors');
  if (event.error) {
    displayError.textContent = event.error.message;
  } else {
    displayError.textContent = '';
  }
});
// Handle button click
document.getElementsByTagName('button')[0].addEventListener("click", (e) => {
    console.log(e);
});
// Handle form submission.
var form = document.getElementById('payment-form');
form.addEventListener('submit', function(event) {
  event.preventDefault();
  stripe.createToken(card).then(function(result) {
    if (result.error) {
      // Inform the user if there was an error.
      var errorElement = document.getElementById('card-errors');
      errorElement.textContent = result.error.message;
    } else {
      // Send the token to your server.
      //console.log(result.token);
      stripeTokenHandler(result.token);
    }
  });
});
function stripeTokenHandler(token) {
  // Insert the token ID into the form so it gets submitted to the server
  var form = document.querySelector('form');
  var hiddenInput = document.createElement('input'),
  hiddenInput1 = document.createElement('input'),
  hiddenInput2 = document.createElement('input'),
  hiddenInput3 = document.createElement('input'),
  hiddenInput4 = document.createElement('input'),
  hiddenInput5 = document.createElement('input');
  hiddenInput.setAttribute('type', 'hidden');
  hiddenInput.setAttribute('name', 'stripeToken');
  hiddenInput.setAttribute('value', token.id);
  hiddenInput1.setAttribute('type', 'hidden');
  hiddenInput1.setAttribute('name', 'paymentId');
  hiddenInput1.setAttribute('value', <%= locals.paymentObj[0].id %>);
  hiddenInput2.setAttribute('type', 'hidden');
  hiddenInput2.setAttribute('name', 'paymentDesc');
  hiddenInput2.setAttribute('value', '<%= locals.paymentObj[0].desc %>');
  hiddenInput3.setAttribute('type', 'hidden');
  hiddenInput3.setAttribute('name', 'paymentPrice');
  hiddenInput3.setAttribute('value', <%= locals.paymentObj[0].price %>);
  hiddenInput4.setAttribute('type', 'hidden');
  hiddenInput4.setAttribute('name', 'paymentSrc');
  hiddenInput4.setAttribute('value', <%= locals.paymentObj[0].id_art %>);
  hiddenInput5.setAttribute('type', 'hidden');
  hiddenInput5.setAttribute('name', 'paymentDest');
  hiddenInput5.setAttribute('value', <%= locals.paymentObj[0].id_pro %>);
  form.appendChild(hiddenInput);
  form.appendChild(hiddenInput1);
  form.appendChild(hiddenInput2);
  form.appendChild(hiddenInput3);
  form.appendChild(hiddenInput4);
  form.appendChild(hiddenInput5);
  var formData = new FormData(form);
  axios.post("http://localhost:4000/payment-module/<%= locals.paymentObj[0].id_pro %>", formData, {
    headers: {"x-access-token": "<%- locals.session.token %>"}
  }).then(res => {
      console.log('test axios ok')
  }).catch((err) => {
      console.log('erreur dans la requête de paiement !');
  })
  // Submit the form
}

</script>